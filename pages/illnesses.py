import dash
from dash import dcc, html, Input, Output, callback
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px

# Загрузка датасета
df = pd.read_csv('formatted_dog_breeds.csv')

# Уникальные породы собак
breeds = df['Breed'].unique()
default_breed = 'Лабрадор-ретривер'
# Получение списка всех заболеваний
illnesses = df.columns[33:]  

# Преобразование всех ненулевых значений в 1
df_illnesses_binary = df[illnesses].applymap(lambda x: 1 if x != 0 else 0)
# Подсчет количества 1 для каждого заболевания
illnesses_counts = df_illnesses_binary.sum().sort_values(ascending=False)
# Создание DataFrame для удобства построения графика
illnesses_counts_df = pd.DataFrame({'Illness': illnesses_counts.index, 'Count': illnesses_counts.values})
# Создание гистограммы с использованием Plotly
fig = px.bar(illnesses_counts_df, x='Illness', y='Count', title='Самые распространенные заболевания у собак', labels={'Illness': 'Заболевание', 'Count': 'Частота'}, color='Illness',
             color_discrete_sequence=px.colors.sequential.Peach)

# Словарь
health_problems = {
    'камни в мочевом пузыре': 'Регулярное обеспечение чистой питьевой водой и сбалансированное питание могут снизить риск образования камней в мочевом пузыре. Регулярные визиты к ветеринару для проверки здоровья мочевыводящей системы также важны.',
    'проблемы с дыханием': 'Избегайте воздействия на собаку сильных аллергенов, таких как пыль, дым и пыльцу. Регулярные упражнения и поддержание здорового веса также помогают уменьшить проблемы с дыханием.',
    'рак': 'Обеспечение сбалансированного питания и избегание контакта с канцерогенами могут помочь в профилактике рака. Регулярные осмотры у ветеринара и ранняя диагностика играют ключевую роль.',
    'проблемы с зубами': 'Регулярная чистка зубов и обеспечение собаки специальными жевательными игрушками могут помочь предотвратить зубной налет и кариес. Периодические стоматологические осмотры у ветеринара также важны.',
    'диабет': 'Поддержание здорового веса и обеспечение сбалансированного питания помогают снизить риск диабета. Регулярные физические упражнения и контроль уровня сахара в крови также необходимы.',
    'ушные инфекции': 'Регулярная чистка ушей и избегание попадания воды и грязи в уши помогают предотвратить инфекции. Осмотр у ветеринара при первых признаках инфекции также важен.',
    'дисплазия локтевого сустава': 'Контроль веса и избегание чрезмерных нагрузок на суставы помогают предотвратить дисплазию локтевого сустава. Регулярные упражнения для укрепления мышц и суставов также полезны.',
    'эпилепсия': 'Регулярные осмотры у ветеринара и соблюдение режима приема предписанных лекарств помогают контролировать эпилепсию. Избегание стрессовых ситуаций также может снизить частоту приступов.',
    'глазные заболевания': 'Регулярные осмотры у ветеринара и поддержание чистоты глаз помогают предотвратить глазные заболевания. Использование специальных капель для глаз по рекомендации ветеринара также полезно.',
    'проблемы со зрением': 'Регулярные осмотры у ветеринара и соблюдение гигиены глаз помогают предотвратить проблемы со зрением. Обеспечение сбалансированного питания с необходимыми витаминами и минералами также важно.',
    'сердечные заболевания': 'Поддержание здорового веса и регулярные физические упражнения помогают предотвратить сердечные заболевания. Регулярные осмотры у ветеринара и контроль уровня холестерина также необходимы.',
    'наследственная миопатия': 'Регулярные осмотры у ветеринара и соблюдение предписанных рекомендаций помогают контролировать наследственную миопатию. Избегание чрезмерных физических нагрузок также полезно.',
    'дисплазия тазобедренного сустава': 'Контроль веса и регулярные упражнения помогают предотвратить дисплазию тазобедренного сустава. Поддержание здорового питания и избегание чрезмерных нагрузок на суставы также важно.',
    'заболевание межпозвоночного диска': 'Поддержание здорового веса и избегание прыжков с высоты помогают предотвратить заболевание межпозвоночного диска. Регулярные осмотры у ветеринара и соблюдение предписанных рекомендаций также необходимы.',
    'ожирение': 'Регулярные физические упражнения и сбалансированное питание помогают предотвратить ожирение. Контроль количества потребляемых калорий и избегание перекормов также важны.',
    'панкреатит': 'Избегание жирной пищи и обеспечение сбалансированного питания помогают предотвратить панкреатит. Регулярные осмотры у ветеринара и контроль за состоянием здоровья поджелудочной железы также необходимы.',
    'респираторные заболевания': 'Избегание контакта с аллергенами и поддержание чистоты окружающей среды помогают предотвратить респираторные заболевания. Регулярные физические упражнения и поддержание здорового веса также полезны.',
    'кожные аллергии': 'Избегание контакта с аллергенами и регулярное купание с использованием гипоаллергенных шампуней помогают предотвратить кожные аллергии. Регулярные осмотры у ветеринара и соблюдение предписанных рекомендаций также важны.'
}

# Макет приложения
layout = dbc.Container([
    dbc.Row([
        dbc.Col(
            html.Div([
                html.H3('Болезни'),
                html.Hr(style={'color': 'black'}),
            ], style={'textAlign': 'center'})
        )
    ]),
    html.Br(),
    dbc.Row([
        dbc.Col([
            dcc.Dropdown(
                id='breed-dropdown1',
                options=[{'label': breed, 'value': breed} for breed in breeds],
                value=default_breed,
                placeholder="Выберите породу",
                multi=False
            ),
            html.Div(id='output-container-breeds'),
        ], width=4),
        dbc.Col([
            dcc.Graph(id='pie-chart')
        ], width=8)
    ]),
    html.Br(),
    dbc.Row ([
        dbc.Col([
            html.Div(dcc.Graph(figure=fig),
            style={'width': '100%', 'float': 'center', 'display': 'inline-block'}),
        ])
    ])
])


# Колбэк для обновления графика при изменении значения в выпадающем списке
@callback(
    Output('pie-chart', 'figure'),
    [Input('breed-dropdown1', 'value')]
)
def update_pie_chart(selected_breed):
    if selected_breed:
        return create_pie_chart(selected_breed)
    return {}

@callback(
    Output('output-container-breeds', 'children'),
    [Input('breed-dropdown1', 'value')]
)
def update_output_breeds(selected_breed):
    if not selected_breed:
        return ' '
   
    breed_row = df[df['Breed'] == selected_breed]
    breed_illnesses = breed_row.iloc[0][32:50].to_dict()
   
    illnesses_list = []
    for illneses, value in breed_illnesses.items():
        if value > 0:
            text = health_problems.get(illneses, '')
            illnesses_list.append(html.Li(f"{illneses}: {text}"))
   
    return html.Ul(illnesses_list)

# Создание круговой диаграммы
def create_pie_chart(breed):
    # Фильтрация данных по выбранной породе
    selected_breed_data = df[df['Breed'] == breed]
    illnesses = selected_breed_data.columns[32:50]  # Названия болезней
    probabilities = selected_breed_data.iloc[0, 32:50].values  # Вероятности болезней

    # Исключение болезней с нулевой вероятностью
    non_zero_illnesses = illnesses[probabilities > 0]
    non_zero_probabilities = probabilities[probabilities > 0]

    # Создание круговой диаграммы
    fig = px.pie(names=non_zero_illnesses, values=non_zero_probabilities, color_discrete_sequence=px.colors.sequential.RdBu)
    fig.update_layout(title=f'Вероятность болезней для породы {breed}')
    return fig